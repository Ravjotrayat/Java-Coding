/*
Search Insert Position

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.
Input: nums = [1,3,5,6], target = 5
Output: 2

Input: nums = [1,3,5,6], target = 2
Output: 1

Input: nums = [1,3,5,6], target = 7
Output: 4
*/

import java.util.*;
public class Search_insert_position
{
 public static void main(String args[])
{
 Scanner sc=new Scanner(System.in);
System.out.println("Enter the limit");
int n=sc.nextInt();
System.out.println("Enter the elements");
int arr[]=new int[n];
for(int i=0;i<n;i++)
arr[i]=sc.nextInt();

System.out.println("Enter the Target element");
int target =sc.nextInt();
int s=search(arr,target);
System.out.println(s);
}

public static int search(int arr[],int target)
{
int start=0;
int end=arr.length-1;	
    while(start<=end)
   {	
    int mid=start+(end-start)/2;		
    if(arr[mid]==target)
	return mid;
    else if(target<arr[mid])		
	end=mid-1;
    else
	start=mid+1;
	
     if(target>arr[arr.length-1])	
	 return arr.length;
   }
 return start%arr.length;
}
}








